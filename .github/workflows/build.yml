name: Build

env:
  IMAGE_TAG: ${{ github.sha }}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ${{vars.AWS_REGION}}
  REGISTRATION_COGNITO_CLIENT_NAME: ${{secrets.REGISTRATION_COGNITO_CLIENT_NAME}}
  REGISTRATION_COGNITO_CLIENT_ID: ${{secrets.REGISTRATION_COGNITO_CLIENT_ID}}
  REGISTRATION_COGNITO_CLIENT_SECRET: ${{secrets.REGISTRATION_COGNITO_CLIENT_SECRET}}
  REGISTRATION_COGNITO_SCOPE: ${{secrets.REGISTRATION_COGNITO_SCOPE}}
  REGISTRATION_COGNITO_DOMAIN: ${{secrets.REGISTRATION_COGNITO_DOMAIN}}
  REGISTRATION_COGNITO_REDIRECT_URI: ${{secrets.REGISTRATION_COGNITO_REDIRECT_URI}}
  REGISTRATION_COGNITO_AUTHORIZATION_GRANT_TYPE: ${{secrets.REGISTRATION_COGNITO_AUTHORIZATION_GRANT_TYPE}}
  PROVIDER_COGNITO_ISSUER_URI: ${{secrets.PROVIDER_COGNITO_ISSUER_URI}}
  PROVIDER_COGNITO_JWK_SET_URI: ${{secrets.PROVIDER_COGNITO_JWK_SET_URI}}
  PROVIDER_COGNITO_USER_POOL_ID: ${{secrets.PROVIDER_COGNITO_USER_POOL_ID}}
  OAUTH2_STATE_SECRET: ${{secrets.OAUTH2_STATE_SECRET}}
  AWS_MIROTALK_API_URL: ${{secrets.AWS_MIROTALK_API_URL}}
  AWS_MIROTALK_API_KEY: ${{secrets.AWS_MIROTALK_API_KEY}}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy (prod, dev)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Update application.properties with environment variables
        run: |
          FILE="src/main/resources/application-${{ github.event.inputs.environment || 'dev' }}.properties"
          
          declare -A REPLACEMENTS=(
            ["<AWS_SES_ACCESS_KEY_ID>"]="${{ secrets.AWS_SES_ACCESS_KEY_ID }}"
            ["<AWS_SES_SECRET_ACCESS_KEY>"]="${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}"
            ["<DOMAIN>"]="${{ vars.DOMAIN }}"
            ["<AWS_ACCESS_KEY_ID>"]="${{ secrets.AWS_ACCESS_KEY_ID }}"
            ["<AWS_SECRET_ACCESS_KEY>"]="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            ["<AWS_REGION>"]="${{ vars.AWS_REGION }}"
            ["<REGISTRATION_COGNITO_CLIENT_NAME>"]="${{ secrets.REGISTRATION_COGNITO_CLIENT_NAME }}"
            ["<REGISTRATION_COGNITO_CLIENT_ID>"]="${{ secrets.REGISTRATION_COGNITO_CLIENT_ID }}"
            ["<REGISTRATION_COGNITO_CLIENT_SECRET>"]="${{ secrets.REGISTRATION_COGNITO_CLIENT_SECRET }}"
            ["<REGISTRATION_COGNITO_SCOPE>"]="${{ secrets.REGISTRATION_COGNITO_SCOPE }}"
            ["<REGISTRATION_COGNITO_DOMAIN>"]="${{ secrets.REGISTRATION_COGNITO_DOMAIN }}"
            ["<REGISTRATION_COGNITO_REDIRECT_URI>"]="${{ secrets.REGISTRATION_COGNITO_REDIRECT_URI }}"
            ["<REGISTRATION_COGNITO_AUTHORIZATION_GRANT_TYPE>"]="${{ secrets.REGISTRATION_COGNITO_AUTHORIZATION_GRANT_TYPE }}"
            ["<PROVIDER_COGNITO_ISSUER_URI>"]="${{ secrets.PROVIDER_COGNITO_ISSUER_URI }}"
            ["<PROVIDER_COGNITO_JWK_SET_URI>"]="${{ secrets.PROVIDER_COGNITO_JWK_SET_URI }}"
            ["<PROVIDER_COGNITO_USER_POOL_ID>"]="${{ secrets.PROVIDER_COGNITO_USER_POOL_ID }}"
            ["<OAUTH2_STATE_SECRET>"]="${{ secrets.OAUTH2_STATE_SECRET }}"
            ["<AWS_MIROTALK_API_URL>"]="${{ secrets.AWS_MIROTALK_API_URL }}"
            ["<AWS_MIROTALK_API_KEY>"]="${{ secrets.AWS_MIROTALK_API_KEY }}"
          )
          
          for key in "${!REPLACEMENTS[@]}"; do
            sed -i "s|$key|${REPLACEMENTS[$key]}|g" "$FILE"
          done

      - name: run tests
        run: mvn test

      - name: run build
        run: mvn package -DskipTests

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download New Relic Java Agent
        run: |
          ENV_DIR="newrelic-${{ github.event.inputs.environment }}"
          mkdir -p $ENV_DIR
          curl -o "$ENV_DIR/$ENV_DIR.jar" https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-agent.jar

      - name: Configure New Relic
        run: |
          echo "common: &default_settings
            license_key: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
            app_name: '${{ vars.NEW_RELIC_APP_NAME }}'
            distributed_tracing:
              enabled: true
            logging:
              level: info" > newrelic-${{ github.event.inputs.environment }}/newrelic-${{ github.event.inputs.environment }}.yml

      - name: Build image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_PR }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          # Build a docker container with environment-specific settings
          docker build -f Dockerfile.aws --build-arg ENVIRONMENT=$ENVIRONMENT -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_PR }}
        run: |
          # Push image to ECR.
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
