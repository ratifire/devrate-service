name: Deploy_service

env:
  IMAGE_TAG: ${{ github.sha }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy (prod, dev)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform deploy service to AWS
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    env:
      working-directory: terraform/deploy_service
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.working-directory }}

    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Select .tfvars file based on environment
        run: |
          echo "Selecting .tfvars file for environment: ${{ github.event.inputs.environment }}"
          if [[ ! -f "/home/runner/work/devrate-service/devrate-service/${{ env.working-directory }}/${{ github.event.inputs.environment }}.tfvars" ]]; then
            echo "Error: File ${{ github.event.inputs.environment }}.tfvars does not exist in /home/runner/work/devrate-service/devrate-service/${{ env.working-directory }}."
            exit 1
          fi

      - name: Terraform Init
        run: |
          terraform init -backend-config="/home/runner/work/devrate-service/devrate-service/${{ env.working-directory }}/${{ github.event.inputs.environment }}.backend" -reconfigure

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Plan
        run: terraform plan -input=false -var-file=${{ github.event.inputs.environment }}.tfvars

      - name: Terraform apply
        env:
          TF_VAR_back_cluster_name: ${{ vars.ECS_CLUSTER }}
          TF_VAR_back_container_name: ${{ vars.CONTAINER_NAME }}
          TF_VAR_back_repository_name: priavte-backend-service-dev-private
          TF_VAR_back_service_name: backend-service-dev_dev-private
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_name: ${{ secrets.DB_NAME }}
          TF_VAR_new_relic_app_name: ${{ vars.NEW_RELIC_APP_NAME }}
          TF_VAR_new_relic_license_key: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          TF_VAR_vapid_public_key: ${{ secrets.VAPID_PUBLIC_KEY }}
          TF_VAR_vapid_private_key: ${{ secrets.VAPID_PRIVATE_KEY }}
          TF_VAR_vapid_subject: ${{ secrets.VAPID_SUBJECT }}
        run: terraform apply -var="image_tag=${{ env.IMAGE_TAG }}" -var-file="${{ github.workspace }}/${{ env.working-directory }}/${{ github.event.inputs.environment }}.tfvars" -auto-approve -input=false
