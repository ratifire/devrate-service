# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS.

name: Amazon ECS

on:
  workflow_dispatch:

env:
  AWS_REGION: 'eu-north-1'                    # set this to your preferred AWS region, e.g. eu-north-1
  ECR_REPOSITORY: backend-service             # set this to your Amazon ECR repository name
  ECS_SERVICE: back-service                   # set this to your Amazon ECS service name
  ECS_CLUSTER: backend-cluster                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: backend_td             # set this to the path to your Amazon ECS task definition file
  CONTAINER_NAME: back-container              # set this to the name of the container in the containerDefinitions section of your task definition
  AWS_SES_ACCESS_KEY_ID: ${{ secrets.AWS_SES_ACCESS_KEY_ID }}
  AWS_SES_SECRET_ACCESS_KEY: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
  ACTIVE_PROFILE: 'dev'

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Update AWS_SES_ACCESS_KEY_ID
        run: sed -i 's|<AWS_SES_ACCESS_KEY_ID>|'"${{ env.AWS_SES_ACCESS_KEY_ID }}"'|' src/main/resources/application-local.properties

      - name: Update AWS_SES_SECRET_ACCESS_KEY
        run: sed -i 's|<AWS_SES_SECRET_ACCESS_KEY>|'"${{ env.AWS_SES_SECRET_ACCESS_KEY }}"'|' src/main/resources/application-local.properties

      - name: Update ACTIVE_PROFILE
        run: sed -i 's|ACTIVE_PROFILE|'"${{ env.ACTIVE_PROFILE }}"'|' src/main/resources/application.properties

      - name: Run tests
        run: mvn test

      - name: Run build
        run: mvn package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get current Task Definition
        id: get-task-def
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition' \
          --output json > task-def.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
