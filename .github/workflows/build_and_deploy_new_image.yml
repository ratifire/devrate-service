# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS.

name: Build_and_Deploy_new_Image

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy (prod, dev)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
  push:
    branches:
      - main

env:
  ZOOM_CLIENT_ID: ${{secrets.ZOOM_CLIENT_ID}}
  ZOOM_CLIENT_SECRET: ${{secrets.ZOOM_CLIENT_SECRET}}
  ZOOM_ACCOUNT_ID: ${{secrets.ZOOM_ACCOUNT_ID}}
  ZOOM_SECRET: ${{secrets.ZOOM_SECRET}}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ${{vars.AWS_REGION}}
  REGISTRATION_COGNITO_CLIENT_NAME: ${{secrets.REGISTRATION_COGNITO_CLIENT_NAME}}
  REGISTRATION_COGNITO_CLIENT_ID: ${{secrets.REGISTRATION_COGNITO_CLIENT_ID}}
  REGISTRATION_COGNITO_CLIENT_SECRET: ${{secrets.REGISTRATION_COGNITO_CLIENT_SECRET}}
  PROVIDER_COGNITO_ISSUER_URI: ${{secrets.PROVIDER_COGNITO_ISSUER_URI}}
  PROVIDER_COGNITO_JWK_SET_URI: ${{secrets.PROVIDER_COGNITO_JWK_SET_URI}}
  AWS_MIROTALK_API_URL: ${{secrets.AWS_MIROTALK_API_URL}}
  AWS_MIROTALK_API_KEY: ${{secrets.AWS_MIROTALK_API_KEY}}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Update application.properties with environment variables
        run: |
          FILE="src/main/resources/application-${{ github.event.inputs.environment || 'dev' }}.properties"
          
          declare -A REPLACEMENTS=(
            ["<AWS_SES_ACCESS_KEY_ID>"]="${{ secrets.AWS_SES_ACCESS_KEY_ID }}"
            ["<AWS_SES_SECRET_ACCESS_KEY>"]="${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}"
            ["<ZOOM_CLIENT_ID>"]="${{ env.ZOOM_CLIENT_ID }}"
            ["<ZOOM_CLIENT_SECRET>"]="${{ env.ZOOM_CLIENT_SECRET }}"
            ["<ZOOM_ACCOUNT_ID>"]="${{ env.ZOOM_ACCOUNT_ID }}"
            ["<ZOOM_SECRET>"]="${{ env.ZOOM_SECRET }}"
            ["<DOMAIN>"]="${{ vars.DOMAIN }}"
            ["<AWS_ACCESS_KEY_ID>"]="${{ secrets.AWS_ACCESS_KEY_ID }}"
            ["<AWS_SECRET_ACCESS_KEY>"]="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            ["<AWS_REGION>"]="${{ vars.AWS_REGION }}"
            ["<REGISTRATION_COGNITO_CLIENT_NAME>"]="${{ secrets.REGISTRATION_COGNITO_CLIENT_NAME }}"
            ["<REGISTRATION_COGNITO_CLIENT_ID>"]="${{ secrets.REGISTRATION_COGNITO_CLIENT_ID }}"
            ["<REGISTRATION_COGNITO_CLIENT_SECRET>"]="${{ secrets.REGISTRATION_COGNITO_CLIENT_SECRET }}"
            ["<PROVIDER_COGNITO_ISSUER_URI>"]="${{ secrets.PROVIDER_COGNITO_ISSUER_URI }}"
            ["<PROVIDER_COGNITO_JWK_SET_URI>"]="${{ secrets.PROVIDER_COGNITO_JWK_SET_URI }}"
            ["<AWS_MIROTALK_API_URL>"]="${{ secrets.AWS_MIROTALK_API_URL }}"
            ["<AWS_MIROTALK_API_KEY>"]="${{ secrets.AWS_MIROTALK_API_KEY }}"
          )
          
          for key in "${!REPLACEMENTS[@]}"; do
            sed -i "s|$key|${REPLACEMENTS[$key]}|g" "$FILE"
          done

      - name: Run tests
        run: mvn test

      - name: Run build
        run: mvn package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          TF_VAR_pg_username: ${{ secrets.PG_USERNAME }}
          TF_VAR_pg_password: ${{ secrets.PG_PASSWORD }}
          TF_VAR_pg_database: ${{ secrets.PG_DATABASE }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get current Task Definition
        id: get-task-def
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ vars.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition' \
          --output json > task-def.json

      - name: Clean Task Definition File
        run: |
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-def.json > clean-task-def.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: clean-task-def.json
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Send notification to Slack
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "GitHub Action (BackEnd): New brunch is deploying to AWS! Status: ${{ job.status }}.\nTriggered by: ${{ github.actor }}\nBranch: ${{ github.ref }}"
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
