name: Deploy

on:
  schedule:
    - cron: '00 05 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy (prod, dev, dev_new)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
          - dev_new

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: determine_env
        run: |
          if [ -z "${{ github.event.inputs.environment }}" ]; then
            ENVIRONMENT="dev"  # Default value for scheduled runs
          else
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          fi
          echo "Selected environment: $ENVIRONMENT"
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Get current branch name
        id: get_branch_name
        run: |
          # Extract branch name from GITHUB_REF
          BRANCH_NAME=$(echo "${GITHUB_REF}" | sed 's/refs\/heads\///')
          echo "Current branch: ${BRANCH_NAME}"
          # Save branch name to GitHub Actions environment variable
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Run create-infrastructure workflow
        id: create_infrastructure
        run: |
          gh workflow run Terraform_deploy --ref ${{ env.BRANCH_NAME }} -F environment=${{ env.ENVIRONMENT }}
          echo "Waiting for Terraform_deploy to complete..."
          sleep 10
          RUN_ID=$(gh run list --workflow=Terraform_deploy --json databaseId,status --limit 1 | jq -r '.[0] | select(.status == "in_progress" or .status == "queued").databaseId')
          if [ -z "$RUN_ID" ]; then
            echo "No in-progress run found. Skipping watch."
          else
            echo "Waiting for workflow run $RUN_ID to complete..."
              gh run watch $RUN_ID --exit-status --interval 15
          fi   

      - name: Run build-and-push-image workflow
        id: build_and_push_image
        if: steps.create_infrastructure.conclusion == 'success'
        run: |
          gh workflow run Build --ref ${{ env.BRANCH_NAME }} -F environment=${{ env.ENVIRONMENT }}
          echo "Waiting for Build to complete..."
          sleep 10
          RUN_ID=$(gh run list --workflow=Build --json databaseId,status --limit 1 | jq -r '.[0] | select(.status == "in_progress" or .status == "queued").databaseId')
          if [ -z "$RUN_ID" ]; then
            echo "No in-progress run found. Skipping watch."
          else
            echo "Waiting for workflow run $RUN_ID to complete..."
              gh run watch $RUN_ID --exit-status --interval 15
          fi 

      - name: Run deploy-application workflow
        if: steps.build_and_push_image.conclusion == 'success'
        run: |
          gh workflow run Deploy_Service_to_AWS --ref ${{ env.BRANCH_NAME }} -F environment=${{ env.ENVIRONMENT }}
          echo "Waiting for Deploy_Service_to_AWS to complete..."
          sleep 10
          RUN_ID=$(gh run list --workflow=Deploy_Service_to_AWS --json databaseId,status --limit 1 | jq -r '.[0] | select(.status == "in_progress" or .status == "queued").databaseId')
          if [ -z "$RUN_ID" ]; then
            echo "No in-progress run found. Skipping watch."
          else
            echo "Waiting for workflow run $RUN_ID to complete..."
              gh run watch $RUN_ID --exit-status --interval 15
          fi 

      - name: Send notification to Slack
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "GitHub Action (BackEnd): ${{ vars.DOMAIN }} is deploying to AWS! Status: ${{ job.status }}.\nEnvironment: ${{ env.ENVIRONMENT }}\nTriggered by: ${{ github.actor }}\nBranch: ${{ github.ref }}"
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
