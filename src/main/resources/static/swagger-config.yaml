openapi: 3.0.3
info:
  title: DevRate Platform API
  description: API endpoints for managing user registration, interview processes, and candidate evaluations on the Devrate platform.
  termsOfService: DevRate
  contact:
    name: DevRate
    url: https://devrate.com
    email: devrate@gmail.com
  license:
    name: DevRate
    url: https://devrate.com
  version: 0.0.1-SNAPSHOT
servers:
  - url: http://localhost:8080
    description: Local environment
  - url: https://devrate.com
    description: Production environment
tags:
  - name: registration
    description: endpoint for user registration
  - name: Notification
    description: Operations related to sending notifications
  - name: authentication
    description: Endpoints for user authentication
  - name: password-reset
    description: Endpoints for password reset functionality
  - name: user info
    description: Endpoints for user personal info functionality
  - name: employment records
    description: Endpoints for user Employment Records management
  - name: achievement
    description: Endpoints for user achievement management
  - name: bookmark
    description: Endpoints for user bookmark management
  - name: static data
    description: Endpoints for retrieving static data
  - name: Specialization
    description: Endpoints for user Specialization management
  - name: Mastery
    description: Endpoints for user Mastery management
  - name: Skill
    description: Endpoints for user Skill management

paths:
  /auth/signup:
    post:
      tags:
        - registration
      description: Register a new user
      security: [ ]
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDto'
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/signup/{code}:
    put:
      tags:
        - registration
      description: Confirming the user's email by matching the code
      security: [ ]
      operationId: confirmEmail
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
          description: The confirmation code to be checked against the stored code.
      responses:
        '201':
          description: Email confirmation code successfully confirmed
          content:
            application/json:
              schema:
                type: integer
                description: The registered user ID.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Code not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: The confirmation code has expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/request-password-reset:
    post:
      tags:
        - password-reset
      summary: Request Password Reset Code
      description: Requests a password reset code to be sent to the given email.
      security: [ ]
      operationId: requestPasswordReset
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
            format: email
          description: The email address of the user requesting a password reset.
      responses:
        '200':
          description: Password reset code sent successfully.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request, e.g., invalid email format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/password-reset:
    post:
      tags:
        - password-reset
      summary: Reset Password
      description: Resets the user's password using a unique code received by the email.
      security: [ ]
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetDto'
      responses:
        '200':
          description: Password reset successfully.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request, e.g., invalid code or password format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/signin:
    post:
      tags:
        - authentication
      summary: Authenticate user
      description: Authenticates a user based on the provided login credentials.
      security: [ ]
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized, e.g., invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: User was not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      tags:
        - authentication
      summary: Logs out the user
      description: Logs out the currently authenticated user.
      security: [ ]
      parameters:
        - in: cookie
          name: JSESSIONID
          description: Session ID cookie
          required: true
      responses:
        '200':
          description: Successful logout
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /notifications:
    patch:
      tags:
        - Notification
      summary: Mark Notification as Read
      description: Marks a notification as read for a given user.
      operationId: markAsRead
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: integer
            description: The ID of the user associated with the notification.
        - in: query
          name: notificationId
          required: true
          schema:
            type: integer
            description: The ID of the notification to be marked as read.
      responses:
        '200':
          description: Notification marked as read successfully.
    delete:
      tags:
        - Notification
      summary: Delete Notification
      description: Deletes a notification for a given user.
      operationId: delete
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: integer
            description: The ID of the user associated with the notification.
        - in: query
          name: notificationId
          required: true
          schema:
            type: integer
            description: The ID of the notification to be deleted.
      responses:
        '200':
          description: Notification deleted successfully.
  /ws/notifications:
    get:
      tags:
        - Notification
      summary: Connect to WebSocket notifications
      description: Establish a WebSocket connection to receive real-time notifications.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDto'
        '401':
          description: Unauthorized, e.g., invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}:
    get:
      tags:
        - user info
      summary: Get user by user ID
      description: Retrieve a specific user personal info based on the user ID
      operationId: findById
      parameters:
        - in: path
          name: id
          description: The user ID of the user personal info to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - user info
      summary: Delete user by user ID
      description: Delete a specific user personal info based on the user ID
      operationId: delete
      parameters:
        - in: path
          name: id
          description: The user ID of the user personal info to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    put:
      tags:
        - user info
      summary: Update user by user ID
      description: Update an existing user personal info based on the user ID
      operationId: update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/language-proficiencies:
    post:
      tags:
        - user info
      summary: Save language proficiencies
      description: Save language proficiencies of the specified user
      operationId: saveLanguageProficiencies
      parameters:
        - in: path
          name: userId
          description: The ID of the user to associate the new language proficiencies with
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LanguageProficiencyDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LanguageProficiencyDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - user info
      summary: Get all language proficiencies by user ID
      description: Retrieve all language proficiencies of the specified user
      operationId: findAllLanguageProficienciesByUserId
      parameters:
        - in: path
          name: userId
          description: The ID of the user to associate the language proficiencies with
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LanguageProficiencyDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/pictures:
    get:
      tags:
        - user info
      summary: Get User Picture
      description: Retrieves the picture associated with the user by their user ID.
      operationId: getUserPicture
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: Unique identifier of the user
      responses:
        '200':
          description: A base64-encoded string of the user's picture.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userPicture:
                    type: string
                    format: base64
        '204':
          description: No content, if the user has no picture
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - user info
      summary: Add or Update User Picture
      description: Adds or updates the picture for the user by their user ID.
      operationId: addUserPicture
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: Unique identifier of the user
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Base64-encoded string of the user picture
      responses:
        '200':
          description: Picture successfully added or updated.
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - user info
      summary: Remove User Picture
      description: Removes the picture for the user by their user ID.
      operationId: removeUserPicture
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: Unique identifier of the user
      responses:
        '200':
          description: User picture removed
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/contacts:
    post:
      tags:
        - user info
      summary: Save contacts
      description: Save contacts of the specified users
      operationId: saveContacts
      parameters:
        - in: path
          name: userId
          description: The ID of the user to associate the contacts with
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ContactDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - user info
      summary: Get all contacts by user ID
      description: Retrieve all contacts of the specified user
      operationId: findAllContactsByUserId
      parameters:
        - in: path
          name: userId
          description: The ID of the user to associate the contacts with
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/educations:
    post:
      tags:
        - education
      summary: Create New Education
      description: Creates a new education record for a specified user.
      operationId: createEducation
      parameters:
        - in: path
          name: userId
          description: The ID of the user for whom the education is being created.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationDto'
      responses:
        '200':
          description: The created education
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - education
      summary: Get all educations by user ID
      description: Retrieve all educations of the specified user
      operationId: getEducationsByUserId
      parameters:
        - in: path
          name: userId
          description: The ID of the user to associate the educations with
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EducationDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /educations/{id}:
    get:
      tags:
        - education
      summary: Get Education By ID
      description: Retrieves an education record based on the provided ID.
      operationId: getEducationById
      parameters:
        - in: path
          name: id
          description: The ID of the education to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The education corresponding to the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - education
      summary: Update Education By ID
      description: Updates an existing education record identified by the provided ID.
      operationId: updateEducation
      parameters:
        - in: path
          name: id
          description: The ID of the education to update.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationDto'
      responses:
        '200':
          description: The updated education
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - education
      summary: Delete Education By ID
      description: Deletes an education record identified by the provided ID.
      operationId: deleteEducation
      parameters:
        - in: path
          name: id
          description: The ID of the education to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Education deleted successfully
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/employment-records:
    get:
      tags:
        - employment records
      summary: Get Employment record By UserId
      description: Retrieves all user`s employment records based on the provided UserId.
      operationId: findByUserId
      parameters:
        - in: path
          name: userId
          description: The userId of the employment record to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The employment record corresponding to the provided userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - employment records
      summary: Create New Employment Records
      description: Creates a new employment record for a specified user.
      operationId: createEmploymentRecord
      parameters:
        - in: path
          name: userId
          description: The ID of the user for whom the employment record is being created.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentRecordDto'
      responses:
        '200':
          description: The created employment records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /employment-records/{id}:
    get:
      tags:
        - employment records
      summary: Get Employment record By ID
      description: Retrieves all user`s employment records based on the provided ID.
      operationId: findById
      parameters:
        - in: path
          name: id
          description: The ID of the employment record to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The employment record corresponding to the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - employment records
      summary: Update employment-record By ID
      description: Updates an existing employment-record identified by the provided ID.
      operationId: update
      parameters:
        - in: path
          name: id
          description: The ID of the employment-record to update.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentRecordDto'
      responses:
        '200':
          description: The updated education
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - employment records
      summary: Delete Employment Record By ID
      description: Deletes an employment record identified by the provided ID.
      operationId: delete
      parameters:
        - in: path
          name: id
          description: The ID of the employment record to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Employment record deleted successfully
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/achievements:
    get:
      tags:
        - achievement
      summary: Get Achievements By UserId
      description: Retrieves all user`s achievements based on the provided UserId.
      operationId: getAchievementsByUserId
      parameters:
        - in: path
          name: userId
          description: The userId of the achievements to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The achievements corresponding to the provided userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - achievement
      summary: Create New Achievement
      description: Creates a new achievement for a specified user.
      operationId: createAchievement
      parameters:
        - in: path
          name: userId
          description: The ID of the user for whom the achievement is being created.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AchievementDto'
      responses:
        '200':
          description: The created achievement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /achievements/{id}:
    get:
      tags:
        - achievement
      summary: Get Achievement By ID
      description: Retrieves achievement based on the provided ID.
      operationId: getById
      parameters:
        - in: path
          name: id
          description: The ID of the achievement to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The achievement corresponding to the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - achievement
      summary: Update Achievement By ID
      description: Updates an existing achievement identified by the provided ID.
      operationId: update
      parameters:
        - in: path
          name: id
          description: The ID of the achievement to update.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AchievementDto'
      responses:
        '200':
          description: The updated achievement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - achievement
      summary: Delete Achievement By ID
      description: Deletes achievement identified by the provided ID.
      operationId: delete
      parameters:
        - in: path
          name: id
          description: The ID of the employment record to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Achievement deleted successfully
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/bookmarks:
    get:
      tags:
        - bookmark
      summary: Get bookmarks By UserId
      description: Retrieves all user`s bookmarks based on the provided UserId.
      operationId: getBookmarksByUserId
      parameters:
        - in: path
          name: userId
          description: The ID of the user to associate the bookmarks with.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookmarkDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - bookmark
      summary: Create new bookmark
      description: Creates a new bookmark for a specified user.
      operationId: createBookmark
      parameters:
        - in: path
          name: userId
          description: The ID of the user for whom the bookmarks is being created.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkDto'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bookmarks/{id}:
    delete:
      tags:
        - bookmark
      summary: Delete Bookmark By ID
      description: Deletes a bookmark by the provided ID.
      operationId: delete
      parameters:
        - in: path
          name: id
          description: The ID of the bookmark to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /data/languageproficiency/{filename}:
    get:
      tags:
        - static data
      summary: Get static file from language proficiency folder
      description: "Returns the content of the static file by its name from the language
      proficiency folder."
      parameters:
        - in: path
          name: filename
          description: Name of the static file to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /data/user/{filename}:
    get:
      tags:
        - static data
      summary: Get static files from user folder
      description: Returns the content of the static file by its name from the user folder.
      security: [ ]
      parameters:
        - in: path
          name: filename
          description: Name of the static file to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /data/specialization/{filename}:
    get:
      tags:
        - static data
      summary: Get static file from specialization folder
      description: "Returns the content of the static file by its name from the specialization 
      folder."
      parameters:
        - in: path
          name: filename
          description: Name of the static file to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/specializations:
    get:
      tags:
        - Specialization
      summary: Get specializations by user ID
      description: Returns a list of specializations for the specified user.
      parameters:
        - in: path
          name: userId
          description: ID of the user
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecializationDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax
    post:
      tags:
        - Specialization
      summary: Create specialization for user
      description: Creates a new specialization and associates it with the specified user.
      parameters:
        - in: path
          name: userId
          description: ID of the user
          required: true
          schema:
            type: integer
      requestBody:
        description: Specialization information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecializationDto'
      responses:
        '200':
          description: Specialization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecializationDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax
  /specializations/{id}:
    get:
      summary: Retrieve specialization by ID
      tags:
        - Specialization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the specialization
      responses:
        '200':
          description: Specialization found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecializationDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
    delete:
      summary: Delete specialization by ID
      tags:
        - Specialization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the specialization
      responses:
        '200':
          description: Specialization deleted
  /specializations/{id}/main-mastery:
    get:
      summary: Retrieve main mastery by Specialization ID
      tags:
        - Specialization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the specialization
      responses:
        '200':
          description: Main mastery found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasteryDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
  /specializations/{id}/masteries:
    get:
      summary: Retrieve list of masteries by Specialization ID
      tags:
        - Specialization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the specialization
      responses:
        '200':
          description: List of masteries found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasteryDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
  /specializations:
    put:
      summary: Update specialization name by specialization ID
      tags:
        - Specialization
      requestBody:
        description: Updated specialization information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  description: The unique identifier for the specialization
                name:
                  type: string
                  description: The name of the specialization
              required:
                - id
                - name
      responses:
        '200':
          description: Specialization updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecializationDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
  /specializations/{id}/set-main:
    put:
      summary: Set main specialization status by Specialization ID
      tags:
        - Specialization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the specialization
      responses:
        '200':
          description: Main specialization set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecializationDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
  /specializations/{specId}/set-main-mastery/{masteryId}:
    put:
      summary: Set new main mastery by Specialization ID and Mastery ID
      tags:
        - Specialization
      parameters:
        - name: specId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the specialization
        - name: masteryId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the mastery
      responses:
        '200':
          description: Main mastery set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasteryDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
  /masteries/{id}:
    get:
      summary: Retrieve Mastery by ID
      tags:
        - Mastery
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the mastery
      responses:
        '200':
          description: Mastery found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasteryDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
  /masteries/{id}/skills:
    get:
      summary: Retrieve list of skills by Mastery ID
      tags:
        - Mastery
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the mastery
      responses:
        '200':
          description: List of skills found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SkillDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
  /masteries/{id}/skill:
    post:
      summary: Create a skill and associate it with the specified Mastery by ID
      tags:
        - Mastery
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the mastery
      requestBody:
        description: Skill information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the skill
              required:
                - name
      responses:
        '200':
          description: Skill created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
  /masteries:
    put:
      summary: Update Mastery by ID
      tags:
        - Mastery
      requestBody:
        description: Updated mastery information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasteryDto'
      responses:
        '200':
          description: Mastery updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasteryDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
  /skills/{id}:
    get:
      summary: Retrieve Skill by ID
      tags:
        - Skill
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the skill
      responses:
        '200':
          description: Skill found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDto'
        '400':
          description: Bad Request. The request cannot be fulfilled due to bad syntax.
    delete:
      summary: Delete Skill by ID
      tags:
        - Skill
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the skill
      responses:
        '204':
          description: Skill deleted
  /skills/{id}/calculate-mark/{mark}:
    put:
      summary: Calculate average mark and update skill information
      tags:
        - Skill
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the skill
        - name: mark
          in: path
          required: true
          schema:
            type: number
          description: New mark to be included in the average calculation
      responses:
        '200':
          description: Skill updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDto'
        '404':
          description: Skill not found
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    UserRegistrationDto:
      type: object
      description: Required information for registering a new user
      properties:
        email:
          type: string
          format: email
          description: The email chosen by the user for their account
        firstName:
          type: string
          description: The first name inputted by the user
        lastName:
          type: string
          description: The last name inputted by the user
        country:
          type: string
          description: The country chosen by the user for their account
        subscribed:
          type: boolean
          description: Flag indicating whether the user is subscribed to the newsletter
        password:
          type: string
          description: The password chosen by the user for their account
      required:
        - email
        - firstName
        - lastName
        - country
        - password
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: The error message
    NotificationActionDto:
      type: object
      properties:
        notificationId:
          type: integer
          description: ID of the notification
        action:
          type: string
          description: Action to be performed on the notification (allowed only "read", "delete")
    NotificationDto:
      type: object
      properties:
        id:
          type: integer
          description: ID of the notification
        text:
          type: string
          maxLength: 100
          description: Text content of the notification
        read:
          type: boolean
          description: Indicates whether the notification has been read
        userId:
          type: integer
          description: ID of the user to whom the notification belongs
    LoginDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          format: password
          description: Password of the user
      required:
        - email
        - password
    UserDto:
      type: object
      description: Required information for registering a new user
      properties:
        id:
          type: integer
          description: The user ID that the user received upon registration
        firstName:
          type: string
          description: The first name inputted by the user
        lastName:
          type: string
          description: The last name inputted by the user
        status:
          type: string
          description: The status (like Java Back-End or ReactJS etc.) inputted by the user
        country:
          type: string
          description: The country chosen by the user for their account
        city:
          type: string
          description: The city chosen by the user for their account
        subscribed:
          type: boolean
          description: Flag indicating whether the user is subscribed to the newsletter
        description:
          type: string
          description: The description by the user for their account
        hardSkillMark:
          type: number
          description: The user's average hard skill mark by main specialization
        softSkillMark:
          type: number
          description: The user's average soft skill mark by main specialization
        completedInterviews:
          type: integer
          description: The count of completed user interviews
        conductedInterviews:
          type: integer
          description: The count of completed user interviews
      required:
        - id
    ContactDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the contact
          readOnly: true
        type:
          type: string
          description: "The type of the contact. The type can only be one of the following: 
          EMAIL, PHONE_NUMBER, TELEGRAM_LINK, LINKEDIN_LINK, GITHUB_LINK, BEHANCE_LINK."
          enum:
            - EMAIL
            - PHONE_NUMBER
            - TELEGRAM_LINK
            - LINKEDIN_LINK
            - GITHUB_LINK
            - BEHANCE_LINK
        value:
          type: string
          description: The value of the contact
      required:
        - type
        - value
    EducationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the education
          readOnly: true
        type:
          type: string
          description: The type of education
        name:
          type: string
          description: The name of the education
        description:
          type: string
          description: Description of the education
        startYear:
          type: integer
          description: The starting year of the education
        endYear:
          type: integer
          description: The ending year of the education
      required:
        - type
        - name
        - description
        - startYear
        - endYear
    EmploymentRecordDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the employment record
          readOnly: true
        startDate:
          type: string
          format: date
          description: The starting date of the employment record
        endDate:
          type: string
          format: date
          description: The ending date of the employment record
        position:
          type: string
          description: The position held during employment
        companyName:
          type: string
          description: The name of the company
        description:
          type: string
          description: Description of the employment record
        responsibilities:
          type: array
          items:
            type: string
          description: Responsibilities during employment
      required:
        - startDate
        - endDate
        - position
        - companyName
        - description
        - responsibilities
    LanguageProficiencyDto:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the language proficiency
          readOnly: true
        name:
          type: string
          description: The name of the language
        code:
          type: string
          description: The international code of the language
        level:
          type: string
          description: The level of the language proficiency
      required:
        - name
        - code
        - level
    BookmarkDto:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the bookmark
          readOnly: true
        name:
          type: string
          description: The name of the bookmark
        link:
          type: string
          description: The link of the bookmark
      required:
        - name
        - link
    AchievementDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the achievement
          readOnly: true
        link:
          type: string
          description: The link of achievement
        summary:
          type: string
          description: The summary of the achievement
        description:
          type: string
          description: Description of the achievement
      required:
        - link
        - summary
        - description
    PasswordResetDto:
      type: object
      properties:
        code:
          type: string
          description: The unique code received by the email.
        newPassword:
          type: string
          description: The new password to be set for the user account.
      required:
        - code
        - newPassword
    SpecializationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the specialization
          readOnly: true
        name:
          type: string
          description: The name of the specialization
        main:
          type: boolean
          description: Whether the specialization is the main specialization
      required:
        - name
        - main
    MasteryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the mastery
          readOnly: true
        name:
          type: string
          description: The name of the mastery level (JUNIOR (1), MIDDLE (2), SENIOR (3))
        softSkillMark:
          type: number
          format: double
          description: The soft skill mark for the mastery
        hardSkillMark:
          type: number
          format: double
          description: The hard skill mark for the mastery
      required:
        - name
    SkillDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the skill
          readOnly: true
        name:
          type: string
          description: The name of the skill
        averageMark:
          type: number
          format: double
          description: The average mark for the skill
      required:
        - name
security:
  - basicAuth: [ ]