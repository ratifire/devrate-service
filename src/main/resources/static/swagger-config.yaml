openapi: 3.0.3
info:
  title: DevRate Platform API
  description: API endpoints for managing user registration, interview processes, and candidate evaluations on the Devrate platform.
  termsOfService: DevRate
  contact:
    name: DevRate
    url: https://devrate.com
    email: devrate@gmail.com
  license:
    name: DevRate
    url: https://devrate.com
  version: 0.0.1-SNAPSHOT
servers:
  - url: http://localhost:8080
    description: Local environment
  - url: https://devrate.com
    description: Production environment
tags:
  - name: registration
    description: endpoint for user registration
  - name: Notification
    description: Operations related to sending notifications
  - name: authentication
    description: Endpoints for user authentication
  - name: password-reset
    description: Endpoints for password reset functionality
  - name: user info
    description: Endpoints for user personal info functionality
  - name: contact
    description: Endpoints for user contact management
paths:
  /auth/signup:
    post:
      tags:
        - registration
      description: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/signup/{code}:
    put:
      tags:
        - registration
      description: Confirming the user's email by matching the code
      operationId: confirmEmail
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
          description: The confirmation code to be checked against the stored code.
      responses:
        '201':
          description: Email confirmation code successfully confirmed
          content:
            application/json:
              schema:
                type: integer
                description: The registered user ID.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Code not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: The confirmation code has expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/password-reset:
    post:
      tags:
        - password-reset
      summary: Request Password Reset Link
      description: Requests a password reset link to be sent to the given email.
      operationId: requestPasswordReset
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
            format: email
          description: The email address of the user requesting a password reset.
      responses:
        '200':
          description: Password reset link sent successfully.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request, e.g., invalid email format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/password-reset/{code}:
    post:
      tags:
        - password-reset
      summary: Reset Password
      description: Resets the user's password using a unique code received in the password reset link.
      operationId: resetPassword
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
          description: The unique code received in the password reset link.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              description: The new password to be set for the user account.
      responses:
        '200':
          description: Password reset successfully.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request, e.g., invalid code or password format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/signin:
    post:
      tags:
        - authentication
      summary: Authenticate user
      description: Authenticates a user based on the provided login credentials.
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized, e.g., invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ws/notifications:
    get:
      tags:
        - Notification
      summary: Connect to WebSocket notifications
      description: Establish a WebSocket connection to receive real-time notifications.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDto'
        '401':
          description: Unauthorized, e.g., invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Notification
      summary: Send action to WebSocket
      description: |
        Send actions to the WebSocket for handling notifications.
      parameters:
        - in: query
          name: payload
          description: JSON payload containing the action to be sent
          required: true
          schema:
            $ref: '#/components/schemas/NotificationActionDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDto'
        '401':
          description: Unauthorized, e.g., invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}:
    get:
      tags:
        - user info
      summary: Get user info by user ID
      description: Retrieve a specific user personal info based on the user ID
      operationId: findById
      parameters:
        - in: path
          name: id
          description: The user ID of the user personal info to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - user info
      summary: Delete user info by user ID
      description: Delete a specific user personal info based on the user ID
      operationId: delete
      parameters:
        - in: path
          name: id
          description: The user ID of the user personal info to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    put:
      tags:
        - user info
      summary: Update user info by user ID
      description: Update an existing user personal info based on the user ID
      operationId: update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /contacts/{id}:
    get:
      tags:
        - contact
      summary: Get contact by its ID
      description: Retrieve a specific contact based on the provided contact ID
      operationId: findById
      parameters:
        - in: path
          name: id
          description: The ID of the contact to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - contact
      summary: Update contact by its ID
      description: Updates an existing contact with provided data
      operationId: update
      parameters:
        - in: path
          name: id
          description: Unique identifier of the contact to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - contact
      summary: Delete contact by its ID
      description: Deletes a contact from the system based on the provided contact ID
      operationId: delete
      parameters:
        - in: path
          name: id
          description: Unique identifier of the contact to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /educations/{userId}:
    post:
      tags:
        - contact
      summary: Create a new contact
      description: Create a new contact of the specified user
      operationId: create
      parameters:
        - in: path
          name: userId
          description: The ID of the user to associate the new contact with
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    UserDto:
      type: object
      description: Required information for registering a new user
      properties:
        email:
          type: string
          format: email
          description: The email chosen by the user for their account
        firstName:
          type: string
          description: The first name inputted by the user
        lastName:
          type: string
          description: The last name inputted by the user
        country:
          type: string
          description: The country chosen by the user for their account
        subscribed:
          type: boolean
          description: Flag indicating whether the user is subscribed to the newsletter
        verified:
          type: boolean
          description: Flag indicating whether the user's email is verified
        password:
          type: string
          description: The password chosen by the user for their account
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the user account was created
          readOnly: true
      required:
        - email
        - firstName
        - lastName
        - country
        - password
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: The error message
    NotificationActionDto:
      type: object
      properties:
        notificationId:
          type: integer
          description: ID of the notification
        action:
          type: string
          description: Action to be performed on the notification (allowed only "read", "delete")
    NotificationDto:
      type: object
      properties:
        id:
          type: integer
          description: ID of the notification
        text:
          type: string
          maxLength: 100
          description: Text content of the notification
        read:
          type: boolean
          description: Indicates whether the notification has been read
        userId:
          type: integer
          description: ID of the user to whom the notification belongs
    LoginDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          format: password
          description: Password of the user
      required:
        - email
        - password
    UserInfoDto:
      type: object
      description: Required information for registering a new user
      properties:
        firstName:
          type: string
          description: The first name inputted by the user
        lastName:
          type: string
          description: The last name inputted by the user
        position:
          type: string
          description: The position inputted by the user
        country:
          type: string
          description: The country chosen by the user for their account
        region:
          type: string
          description: The region chosen by the user for their account
        city:
          type: string
          description: The city chosen by the user for their account
        subscribed:
          type: boolean
          description: Flag indicating whether the user is subscribed to the newsletter
        description:
          type: string
          description: The description by the user for their account
        userId:
          type: integer
          description: The user ID that the user received upon registration
      required:
        - userId
    ContactDto:
      type: object
      properties:
        type:
          type: string
          description: "The type of the contact. The type can only be one of the following: 
          EMAIL, PHONE_NUMBER, TELEGRAM_LINK, LINKEDIN_LINK, GITHUB_LINK."
          enum:
            - EMAIL
            - PHONE_NUMBER
            - TELEGRAM_LINK
            - LINKEDIN_LINK
            - GITHUB_LINK
        value:
          type: string
          description: The value of the contact
      required:
        - type
        - value