openapi: 3.0.3
info:
  title: DevRate Platform API
  description: API endpoints for managing user registration, interview processes, and candidate evaluations on the Devrate platform.
  termsOfService: DevRate
  contact:
    name: DevRate
    url: https://devrate.com
    email: devrate@gmail.com
  license:
    name: DevRate
    url: https://devrate.com
  version: 0.0.1-SNAPSHOT
servers:
  - url: http://localhost:8080
    description: Local environment
  - url: https://devrate.com
    description: Production environment
tags:
  - name: registration
    description: endpoint for user registration
  - name: authentication
    description: Endpoints for user authentication
  - name: password-reset
    description: Endpoints for password reset functionality
paths:
  /auth/signup:
    post:
      tags:
        - registration
      description: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/signup/{id}/{code}:
    get:
      tags:
        - registration
      description: Confirming the user's email by matching the code
      operationId: confirmEmail
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The unique identifier of the user for whom the email is being confirmed.
        - in: path
          name: code
          required: true
          schema:
            type: string
          description: The confirmation code to be checked against the stored code.
      responses:
        '200':
          description: Email confirmation code successfully confirmed
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request, e.g., invalid ID or code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or code not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/password-reset:
    post:
      tags:
        - password-reset
      summary: Request Password Reset Link
      description: Requests a password reset link to be sent to the given email.
      operationId: requestPasswordReset
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
            format: email
          description: The email address of the user requesting a password reset.
      responses:
        '200':
          description: Password reset link sent successfully.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request, e.g., invalid email format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/password-reset/{code}:
    post:
      tags:
        - password-reset
      summary: Reset Password
      description: Resets the user's password using a unique code received in the password reset link.
      operationId: resetPassword
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
          description: The unique code received in the password reset link.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              description: The new password to be set for the user account.
      responses:
        '200':
          description: Password reset successfully.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request, e.g., invalid code or password format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/signin:
    post:
      tags:
        - authentication
      summary: Authenticate user
      description: Authenticates a user based on the provided login credentials.
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized, e.g., invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /educations:
    get:
      tags:
        - education
      summary: Get All Educations
      description: Returns a list of all educations in the system.
      operationId: getAllEducations
      responses:
        '200':
          description: A list of educations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EducationDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /educations/{userId}:
    post:
      tags:
        - education
      summary: Create New Education
      description: Creates a new education record for a specified user.
      operationId: createEducation
      parameters:
        - in: path
          name: user_id
          description: The ID of the user for whom the education is being created.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationDto'
      responses:
        '200':
          description: The created education
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /educations/{id}:
    get:
      tags:
        - education
      summary: Get Education By ID
      description: Retrieves an education record based on the provided ID.
      operationId: getEducationById
      parameters:
        - in: path
          name: id
          description: The ID of the education to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The education corresponding to the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - education
      summary: Update Education By ID
      description: Updates an existing education record identified by the provided ID.
      operationId: updateEducation
      parameters:
        - in: path
          name: id
          description: The ID of the education to update.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationDto'
      responses:
        '200':
          description: The updated education
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationDto'
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - education
      summary: Delete Education By ID
      description: Deletes an education record identified by the provided ID.
      operationId: deleteEducation
      parameters:
        - in: path
          name: id
          description: The ID of the education to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Education deleted successfully
        '400':
          description: Bad request, e.g., missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    UserDto:
      type: object
      description: Required information for registering a new user
      properties:
        email:
          type: string
          format: email
          description: The email chosen by the user for their account
        firstName:
          type: string
          description: The first name inputted by the user
        lastName:
          type: string
          description: The last name inputted by the user
        country:
          type: string
          description: The country chosen by the user for their account
        subscribed:
          type: boolean
          description: Flag indicating whether the user is subscribed to the newsletter
        verified:
          type: boolean
          description: Flag indicating whether the user's email is verified
        password:
          type: string
          description: The password chosen by the user for their account
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the user account was created
          readOnly: true
      required:
        - email
        - firstName
        - lastName
        - country
        - password
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: The error message
    LoginDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          format: password
          description: Password of the user
      required:
        - email
        - password
    EducationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the education
          readOnly: true
        educationType:
          type: string
          description: The type of education
        educationName:
          type: string
          description: The name of the education
        description:
          type: string
          description: Description of the education
        startYear:
          type: integer
          description: The starting year of the education
        endYear:
          type: integer
          description: The ending year of the education
      required:
        - educationType
        - educationName
        - description
        - startYear
        - endYear

